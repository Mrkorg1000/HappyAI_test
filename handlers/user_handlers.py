import asyncio
from io import BytesIO
from typing import Optional
from aiogram import Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F, types
from sqlalchemy.ext.asyncio import AsyncSession

from config import settings

from pg_db.database import async_session_maker
from services.audio_to_text_service import audio_to_text
from services.assistant_client_service import get_single_response
from services.check_values_service import generate_followup_question, save_user_values, user_has_values, validate_values_response
from services.text_to_audio_service import text_to_audio


user_router = Router()


class Form(StatesGroup):
    waiting_for_values = State()
    refining_values = State()


@user_router.message(CommandStart())
async def start(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! <b>{message.from_user.first_name}</b>\n"
        "–Ø –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã! –¢–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ!!!",
        parse_mode=ParseMode.HTML
    )


@user_router.message(lambda message: message.text)
async def process_text(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –û–±—ä–µ–∫—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    print('!!!!!!!!!!!!!!!!!!!!!process_text started')
    await message.answer(("–û–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–º!\n–ò–∑–≤–∏–Ω–∏, –ë—Ä–∞—Ç, —Ç–∞–∫–æ–µ –ó–∞–¥–∞–Ω–∏–µ üòî"))


@user_router.message(lambda message: message.voice,
                     ~StateFilter(Form.waiting_for_values),
                     ~StateFilter(Form.refining_values)
)
async def process_voice_question(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ —Ç–µ–∫—Å—Ç,
    –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - message (types.Message): –û–±—ä–µ–∫—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    print('!!!!!!!!!!!!!!!!!!!!!process_voice_question started')
    voice: types.Voice = message.voice
    file_id: str = voice.file_id

    await message.answer("–°–µ–∫—É–Ω–¥–æ—á–∫—É, —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—á—É")

    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    file: types.File = await message.bot.get_file(file_id)
    downloaded_file: BytesIO = await message.bot.download_file(file.file_path)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
    question_text: Optional[str] = await audio_to_text(downloaded_file)

    if question_text is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    response_text: Optional[str] = await get_single_response(question_text)

    if response_text is None:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –∞—É–¥–∏–æ
    audio_response: Optional[BytesIO] = await text_to_audio(response_text, api_key=settings.OPENAI_API_KEY)

    if audio_response:
        audio_response.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        voice_file = types.BufferedInputFile(
            audio_response.getvalue(), filename="response.ogg"
        )
        await message.answer_voice(voice_file)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")

    await asyncio.sleep(3)
    
    telegram_id = message.from_user.id
    has_values = await user_has_values(telegram_id)
    if not has_values:
        user_name = message.from_user.first_name
        values_question = f"{user_name}, –æ—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ —Ç–≤–æ–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏. –ú–æ–∂–µ—à—å –Ω–∞–∑–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ."
    
    await state.set_state(Form.waiting_for_values)
    
    audio_response: Optional[BytesIO] = await text_to_audio(values_question, api_key=settings.OPENAI_API_KEY)

    if audio_response:
        audio_response.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        voice_file = types.BufferedInputFile(
            audio_response.getvalue(), filename="response.ogg"
        )
        await message.answer_voice(voice_file)
        
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
        await state.clear()
        
        
@user_router.message(lambda message: message.voice, StateFilter(Form.waiting_for_values))
async def process_values(
    message: types.Message,
    state: FSMContext,
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö.
    """

    voice: types.Voice = message.voice
    file_id: str = voice.file_id

    await message.answer("–°–µ–∫—É–Ω–¥–æ—á–∫—É, —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–æ—Ç–∞—é —Ç–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏")

    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    file: types.File = await message.bot.get_file(file_id)
    downloaded_file: BytesIO = await message.bot.download_file(file.file_path)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
    values_text: Optional[str] = await audio_to_text(downloaded_file)

    if values_text is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
    is_valid, values = await validate_values_response(values_text, openai_api_key=settings.OPENAI_API_KEY)

    if is_valid:
        # await message.answer("–û—Ç–≤–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        # return
        async with async_session_maker() as session:
            telegram_id = message.from_user.id
            await save_user_values(session, telegram_id, values)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # telegram_id = message.from_user.id
    # await save_user_values(session, telegram_id, values)
        await message.answer("–¶–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await state.clear()
        
    else:
        await state.update_data(previous_responses=[values_text], attempt_count=1)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        followup_question = await generate_followup_question(
            values_text, 
            attempt=1, 
            openai_api_key=settings.OPENAI_API_KEY
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π
        await state.set_state(Form.refining_values)
        
        audio_response: Optional[BytesIO] = await text_to_audio(followup_question, api_key=settings.OPENAI_API_KEY)
        
        if audio_response:
            audio_response.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
            voice_file = types.BufferedInputFile(
                audio_response.getvalue(), filename="response.ogg"
            )
            await message.answer_voice(voice_file)
        
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
            await state.clear() 
            
            
 # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@user_router.message(lambda message: message.voice, StateFilter(Form.refining_values))
async def process_values_refinement(
    message: types.Message,
    state: FSMContext,
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    previous_responses = state_data.get("previous_responses", [])
    attempt_count = state_data.get("attempt_count", 1)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    voice: types.Voice = message.voice
    file_id: str = voice.file_id
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    file: types.File = await message.bot.get_file(file_id)
    downloaded_file: BytesIO = await message.bot.download_file(file.file_path)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
    current_response: Optional[str] = await audio_to_text(downloaded_file)
    if current_response is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º
    previous_responses.append(current_response)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    combined_responses = " ".join(previous_responses)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    is_valid, values = await validate_values_response(
        combined_responses, 
        openai_api_key=settings.OPENAI_API_KEY
    )
    
    if is_valid:
        # –¶–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
        async with async_session_maker() as session:
            telegram_id = message.from_user.id
            await save_user_values(session, telegram_id, values)
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer("–¶–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.")
        await state.clear()
    else:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        attempt_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if attempt_count > 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è (–≤—Å–µ–≥–æ 4 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è)
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏. –î–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        followup_question = await generate_followup_question(
            combined_responses, 
            attempt=attempt_count, 
            openai_api_key=settings.OPENAI_API_KEY
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await state.update_data(
            previous_responses=previous_responses,
            attempt_count=attempt_count
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–µ
        audio_response: Optional[BytesIO] = await text_to_audio(followup_question, api_key=settings.OPENAI_API_KEY)
        if audio_response:
            audio_response.seek(0)
            voice_file = types.BufferedInputFile(
                audio_response.getvalue(), filename="followup_question.ogg"
            )
            await message.answer_voice(voice_file)
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
      

         